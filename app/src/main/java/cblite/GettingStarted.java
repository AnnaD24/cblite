package cblite;

import com.couchbase.lite.*;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.Objects;
import java.util.Random;

public class GettingStarted {

  private static final String DB_NAME = "db";
  /* Credentials declared this way purely for expediency in this demo - use OAUTH in production code */
  private static final String DB_USER = "george";
  private static final String DB_PASS = "pass";
  //websockets url scheme
  private static final String SYNC_GATEWAY_URL = "ws://127.0.0.1:4984/db";

  private static void queryAll(Query queryAll) {
    System.out.println("****************************");
    int numRows = 0;

    try {
      for (Result thisDoc : queryAll.execute()) {
        numRows++;
        System.out.printf("%d. doc id: %s, name: %s, description: %s%n",
          numRows,
          thisDoc.getString("_id"),
          thisDoc.getString("name"),
          thisDoc.getString("description"));
      }
    } catch (CouchbaseLiteException e) {
      e.printStackTrace();
    }
    System.out.printf("Total rows returned by query = %d%n", numRows);
    System.out.println("****************************");
  }

  public static void main(String[] args) throws CouchbaseLiteException, InterruptedException, URISyntaxException {
    Random RANDOM = new Random();
    int randPtrLang = RANDOM.nextInt(100);

    // Initialize Couchbase Lite
    CouchbaseLite.init();

    // Get the database (and create it if it doesnâ€™t exist).
    DatabaseConfiguration config = new DatabaseConfiguration();

    Database database = new Database(DB_NAME, config);

    // Create a new document (i.e. a record) in the database.
    MutableDocument mutableDoc = new MutableDocument()
      .setString("name", randPtrLang + "cb")
      .setString("description", randPtrLang + "cb")
      .setString("state", "Alaska");

    // Save it to the database.
    database.save(mutableDoc);

    Document document = database.getDocument(mutableDoc.getId());
    // Log the document ID (generated by the database) and properties
    System.out.printf("Saved document id: %s, name: %s, description: %s%n", document.getId(), document.getString("name"), document.getString("description"));

    Query queryAll = QueryBuilder.select(SelectResult.expression(Meta.id),
      SelectResult.property("_id"),
      SelectResult.property("name"),
      SelectResult.property("description"))
      .from(DataSource.database(database));

    // connection with sync gateway(server or cloud)
    ReplicatorConfiguration replConfig = new ReplicatorConfiguration(database, new URLEndpoint(new URI(SYNC_GATEWAY_URL)));

    //filtrare
    /*
      Pull replication filters are not a substitute for channels.
      Sync Gateway channels are designed to be scalable (documents are filtered on the server),
      whereas a pull replication filter is applied to a document once it has been downloaded.
    */
    replConfig.setPullFilter((doc, flags) -> Objects.requireNonNull(doc.getString("name")).contains("cbl"));

    replConfig.setReplicatorType(ReplicatorConfiguration.ReplicatorType.PUSH_AND_PULL);
    // Add authentication.
    replConfig.setAuthenticator(new BasicAuthenticator(DB_USER, DB_PASS));

    //keeping the connection alive, pinging the Sync Gateway at a configurable interval
    //replConfig.setHeartbeat(30L);
    replConfig.setContinuous(true);

    // Create replicator (client) which brings both local and remote dbs into sync
    Replicator replicator = new Replicator(replConfig);

    // Listen to replicator change events.
    replicator.addChangeListener(change -> {
      if (change.getStatus().getActivityLevel().equals(AbstractReplicator.ActivityLevel.IDLE)) {
        queryAll(queryAll);
      }
      if (change.getStatus().getError() != null) {
        System.err.println("Error code ::  " + change.getStatus().getError().getCode());
      }
    });

    // Start replication.
    replicator.start();

    // Check status of replication and wait till it is completed
    while (replicator.getStatus().getActivityLevel() != Replicator.ActivityLevel.STOPPED) {
      Thread.sleep(1000);
    }

    System.out.println("Finish!");

    System.exit(0);
  }
}
